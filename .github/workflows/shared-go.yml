on:
  workflow_call:
    inputs:
      minio:
        description: Run a MinIO service during the build.
        type: boolean
        required: false
        default: false
      dynamodb:
        description: Run a DynamoDB service during the build.
        type: boolean
        required: false
        default: false
      postgres:
        description: Run a PostgreSQL service during the build.
        type: boolean
        required: false
        default: false
      mariadb:
        description: Run a MariaDB service during the build.
        type: boolean
        required: false
        default: false
      mysql:
        description: Run a MySQL service during the build.
        type: boolean
        required: false
        default: false

    secrets:
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      DNSIMPLE_TOKEN:
        required: false

env:
  AWS_RETRY_MODE: adaptive
  AWS_MAX_ATTEMPTS: 10 # attempt to deal with rather aggressive Route 53 rate limiting
  DOGMATIQ_TEST_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  DOGMATIQ_TEST_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  DOGMATIQ_TEST_DNSIMPLE_TOKEN: ${{ secrets.DNSIMPLE_TOKEN }}

jobs:
  platforms:
    name: Platform detection
    runs-on: ubuntu-latest

    outputs:
      go: ${{ steps.check.outputs.go }}
      nodejs: ${{ steps.check.outputs.nodejs }}
      docker: ${{ steps.check.outputs.docker }}
      helm: ${{ steps.check.outputs.helm }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for platform-specific files
        id: check
        run: |
          check() {
            local id=$1
            local file=$2
            local description=$3

            if [ -f "$file" ]; then
              echo "${id}=true" >> $GITHUB_OUTPUT
              echo "● ${description} detected via "'`'"${file}"'`' >> $GITHUB_STEP_SUMMARY
            else
              echo "○ ${description} not detected" >> $GITHUB_STEP_SUMMARY
            fi
          }

          check go     go.mod            "Go module"
          check nodejs package.json      "Node.js package"
          check docker Dockerfile         "Docker image"
          check helm   charts/Chart.yaml "Helm chart"

  go:
    name: Go
    runs-on: ubuntu-latest
    needs: platforms
    if: needs.platforms.outputs.go == 'true'

    outputs:
      branch_protection: "true"

    steps:
      - name: Setup service environment variables
        run: |
          if ${{ inputs.minio }}; then
            echo "DOGMATIQ_TEST_MINIO_ENDPOINT=http://localhost:${{ job.services.minio.ports['9000'] }}" >> $GITHUB_ENV
            echo "DOGMATIQ_TEST_MINIO_ACCESS_KEY=minio" >> $GITHUB_ENV
            echo "DOGMATIQ_TEST_MINIO_SECRET_KEY=password" >> $GITHUB_ENV
          fi

          if ${{ inputs.dynamodb }}; then
            echo "DOGMATIQ_TEST_DYNAMODB_ENDPOINT=http://localhost:${{ job.services.dynamodb.ports['8000'] }}" >> $GITHUB_ENV
          fi

          if ${{ inputs.postgres }}; then
            echo "DOGMATIQ_TEST_DSN_POSTGRESQL_PGX=user=postgres password=rootpass sslmode=disable host=127.0.0.1 port=${{ job.services.postgres.ports['5432'] }}" >> $GITHUB_ENV
            echo "DOGMATIQ_TEST_DSN_POSTGRESQL_POSTGRES=postgres://postgres:rootpass@127.0.0.1:${{ job.services.postgres.ports['5432'] }}?sslmode=disable" >> $GITHUB_ENV
          fi

          if ${{ inputs.mysql }}; then
            echo "DOGMATIQ_TEST_DSN_MYSQL_MYSQL=root:rootpass@tcp(127.0.0.1:${{ job.services.mysql.ports['3306'] }})/mysql" >> $GITHUB_ENV
          fi

          if ${{ inputs.mariadb }}; then
            echo "DOGMATIQ_TEST_DSN_MARIADB_MYSQL=root:rootpass@tcp(127.0.0.1:${{ job.services.mariadb.ports['3306'] }})/mysql" >> $GITHUB_ENV
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true

      - name: Make
        run: make ci

      - name: Make (tests only, with CGO)
        run: make test
        env:
          CGO_ENABLED: "1"

      - name: Upload coverage report
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

    services:
      minio:
        image: ${{ inputs.minio && 'bitnami/minio:latest' || '' }}
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 2s
          --health-timeout 10s
          --health-start-period 30s
          --health-retries 10
        ports:
          - 9000/tcp
        env:
          MINIO_ROOT_USER: minio
          MINIO_ROOT_PASSWORD: password

      dynamodb:
        image: ${{ inputs.dynamodb && 'amazon/dynamodb-local:latest' || '' }}
        options: >-
          --health-cmd "curl http://localhost:8000"
          --health-interval 2s
          --health-timeout 10s
          --health-start-period 30s
          --health-retries 10
        ports:
          - 8000/tcp

      mysql:
        image: ${{ inputs.mysql && 'mysql:latest' || '' }}
        options: >-
          --mount type=tmpfs,destination=/var/lib/mysql
          --health-cmd="mysqladmin ping --host 127.0.0.1 --port 3306 --user root --password=rootpass"
          --health-interval 2s
          --health-timeout 10s
          --health-start-period 30s
          --health-retries 10
        ports:
          - 3306/tcp
        env:
          MYSQL_ROOT_PASSWORD: rootpass

      mariadb:
        image: ${{ inputs.mariadb && 'mariadb:latest' || '' }}
        options: >-
          --mount type=tmpfs,destination=/var/lib/mysql
          --health-cmd="healthcheck.sh --su-mysql --connect --innodb_initialized"
          --health-interval 2s
          --health-timeout 10s
          --health-start-period 30s
          --health-retries 10
        ports:
          - 3306/tcp
        env:
          MARIADB_ROOT_PASSWORD: rootpass

      postgres:
        image: ${{ inputs.postgres && 'postgres:latest' || '' }}
        options: >-
          --health-cmd pg_isready
          --health-interval 2s
          --health-timeout 10s
          --health-start-period 30s
          --health-retries 10
        ports:
          - 5432/tcp
        env:
          POSTGRES_PASSWORD: rootpass

  docker:
    name: Docker
    runs-on: ubuntu-latest
    needs: platforms
    if: needs.platforms.outputs.docker == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true

      - name: Login to GitHub Container Registry
        if: startsWith(github.ref , 'refs/tags/v')
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image${{ startsWith(github.ref , 'refs/tags/v') && ' and push to registry' || '' }}
        env:
          DOCKER_TAGS: ${{ github.ref_name }}
        run: docker buildx create --use && make docker${{ startsWith(github.ref , 'refs/tags/v') && '-push' || '' }}

  helm:
    name: Helm
    runs-on: ubuntu-latest
    needs:
      - platforms
      - docker # ensure docker image has been built and pushed first
    if: needs.platforms.outputs.helm == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true

      - name: Package chart
        run: make helm-package

      - name: Login to GitHub Container Registry
        if: startsWith(github.ref , 'refs/tags/v')
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push chart to registry
        if: startsWith(github.ref , 'refs/tags/v')
        run: make helm-push
